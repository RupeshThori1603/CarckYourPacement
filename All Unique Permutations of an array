vector<vector<int>> uniquePermutations(vector<int>& nums) {
    vector<vector<int>> result;
    sort(nums.begin(), nums.end());
    backtrack(nums, 0, {}, result);
    return result;
}

void backtrack(vector<int>& nums, int start, vector<int> current, vector<vector<int>>& result) {
    if (current.size() == nums.size()) {
        result.push_back(current);
        return;
    }

    for (int i = start; i < nums.size(); i++) {
        if (i > start && nums[i] == nums[i-1]) {
            continue;
        }
        current.push_back(nums[i]);
        backtrack(nums, i+1, current, result);
        current.pop_back();
    }
}
